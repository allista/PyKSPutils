#!/usr/bin/python
# coding=utf-8

"""
Created on Dec 3, 2015

@author: Allis Tauri <allista@gmail.com>
"""

from __future__ import print_function

import sys, os, re
import fnmatch
import argparse
import zipfile
import datetime
from collections import deque

from git import Repo
from os.path import join

sources = ['.', 'src', 'source', 'Source']
exclude = ['*~']

assembly_info = 'AssemblyInfo.cs'
title_re = re.compile(r'.*AssemblyTitle\(\"(.*)\"\)\]')
version_re = re.compile(r'.*AssemblyVersion\(\"(.*)\"\)\]')


def parse_assembly_info(filename):
    _modname = None
    _version = None
    if os.path.isfile(filename):
        with open(filename) as ainfo:
            for line in ainfo:
                match = title_re.match(line)
                if not match:
                    match = version_re.match(line)
                    if match: _version = 'v'+match.group(1)
                else: _modname = match.group(1)
                if _modname and _version: break
    return _modname, _version
#end def


def sort_by_commit_date(lst):
    return sorted(lst, key=lambda c: c.committed_date, reverse=True)


def bfs_find_tag(head, tags):
    q = deque()
    def add_parents(c): q.extend(sorted(c.parents, key=lambda c: c.committed_date))
    add_parents(head)
    visited = {head}
    while q:
        c = q.pop()
        if c in visited: continue
        if c.hexsha in tags: break
        add_parents(c)
        visited.add(c)
    return sort_by_commit_date(visited)


def list_branch_only_commits(repo, branch, reference):
    ref_commits = set(repo.iter_commits(rev=reference))
    branch_commits = [c for c in repo.iter_commits(rev=branch) if c not in ref_commits]
    return sorted(branch_commits, key=lambda c: c.committed_date, reverse=True)


def zip_dir(zipf, dirpath, exclude=None, prefix=''):
    cdir = os.path.abspath(os.curdir)
    wdir = os.path.dirname(dirpath)
    if wdir:
        dirpath = os.path.basename(dirpath)
        os.chdir(wdir)
    print(os.curdir, dirpath)
    try:
        for dirname, dirs, files in os.walk(dirpath):
            for f in files:
                relpath = join(dirname, f)
                if exclude and filter(lambda pat: fnmatch.fnmatch(relpath, pat), exclude): continue
                arcpath = join(prefix, relpath) if prefix else relpath
                print('Adding: %s' % arcpath)
                zipf.write(relpath, arcpath)
    finally:
        os.chdir(cdir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Creates a KSP mod distribution and changelog file')
    parser.add_argument('-d', '--dir', metavar='path', dest='dir',
                        type=str, nargs=1, default=['.'],
                        help='Path to the root directory of the mod.')
    parser.add_argument('-s',  '--source', metavar='path', dest='source', 
                        type=str, nargs=1, default=[],
                        help='Relative path to the source directory.')
    parser.add_argument('-e',  '--exclude', metavar='paths', dest='exclude', 
                        type=str, nargs="*", default=[],
                        help='Files that should be excluded from the distribution. '
                        'Relative the the GameData directory. Wildcards are supported.')
    parser.add_argument('-i', '--include', metavar='paths', dest='include',
                        type=str, nargs="*", default=[],
                        help='Paths that should be included into the distribution. '
                             'Exclude patterns are also applied here.')
    args = parser.parse_args()
    #go to the root dir
    root = args.dir[0]
    if not os.path.isdir(root):
        print('No such directory:', root)
        sys.exit(1)
    os.chdir(root)
    #use source and exclude
    if args.source: sources = args.source
    if args.exclude: exclude += args.exclude
    #check if it is indeed the mod directory
    if not os.path.exists('./GameData'):
        print('No %s/GameData directory.' % root)
        sys.exit(1)
    #check repository
    repo = Repo('.')
    if repo.bare:
        print('Git repository is empty')
        sys.exit(2)
    #get mod name and current version
    modname, version = None, None
    wd = os.path.abspath(os.curdir)
    for src in sources:
        modname, version = parse_assembly_info(join(wd, src, assembly_info))
        if modname and version: break
        modname, version = parse_assembly_info(join(wd, src, 'Properties', assembly_info))
        if modname and version: break
    if not modname or not version:
        print('Unable to determine mod name and version')
        sys.exit(3)
    current = "%s-%s" % (modname, version)
    #make distribution package
    releases = 'Releases'
    try: os.mkdir(releases)
    except: pass
    release = join(releases, current+'.zip')
    print('Making release: %s\n' % release)
    with zipfile.ZipFile(release, 'w', zipfile.ZIP_DEFLATED) as zipf:
        zip_dir(zipf, 'GameData', exclude)
        if args.include:
            for incpath in args.include:
                zip_dir(zipf, incpath, exclude)
    #get commit history
    tags = dict((t.commit.hexsha, t.name) for t in repo.tags if t.commit.hexsha != repo.head.commit.hexsha)
    if repo.head != repo.heads.master:
        branch = list_branch_only_commits(repo, repo.head, repo.heads.master)
    else: branch = repo.iter_commits()
    commits = []
    for c in branch:
        if c.hexsha in tags: break
        commits.append(c)
    changelog = ['[%s] %s' % (datetime.datetime.fromtimestamp(c.committed_date),
                              c.message.replace('\n', ' ')) for c in sort_by_commit_date(commits)]
    #write changelog
    if changelog:
        print()
        print('\n'.join(changelog))
        chlog_file = join(releases, current+'.log') 
        with open(chlog_file, 'w') as log:
            log.write(u'\n'.join(changelog).encode('utf-8').strip())
        print('\nChangeLog:', chlog_file)
    print('Done')
