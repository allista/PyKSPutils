#!/usr/bin/python3
# coding=utf-8


import argparse
import sys

from KSPUtils.config_node_utils import ConfigNode, Part
from KSPUtils.config_node_utils.search import SearchTerm

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Search through part configurations for '
                                                 'specific information and print it.')
    parser.add_argument('term', metavar='term',
                        type=str, nargs='+',
                        help='Selector term(s) of the form:\n'
                             'Node1[:name]/Node2[:name]/[Key:value]\n'
                             'Each Node, node name, Key and value are interpreted as '
                             'separate regular expressions. Node names may be omitted. '
                             'Empty Node:name pair matches any node. '
                             'The PART node may be omitted.')
    parser.add_argument('path', metavar='path',
                        type=str, default='.',
                        help='Path to search for part configuration files. '
                             'If "-" is given, read from the standard input.')
    parser.add_argument('-p', '--print-part',
                        action='store_true',
                        help='If specified, print the part name along with the selected object.')
    args = parser.parse_args()
    # parse search terms
    terms = []
    for t in args.term:
        term = SearchTerm(t)
        if term[0].node.match('PART') is None:
            term.insert(0, SearchTerm.Node('PART'))
        terms.append(term)


    # parse parts
    def match_and_print(p):
        if p is None: return
        for term in terms:
            objects = term.select(p)
            if not objects: continue
            if args.print_part: print(p.name)
            print('\n'.join(str(o) for o in objects))


    path = args.path
    if path == '-':  # stdin
        for p in Part.LoadFromNode(ConfigNode.FromText(sys.stdin.read())):
            match_and_print(p)
    else:
        for p in Part.LoadFromPath(path):
            match_and_print(p)
    sys.exit(0)
