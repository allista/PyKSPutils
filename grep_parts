#!/usr/bin/python
# coding=utf-8

from __future__ import print_function

import os
import sys
import argparse
from KSPUtils import Part, SearchTerm, SearchGroup


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Search through part configurations for specific information')
    parser.add_argument('term', metavar='[^]term',
                        type=str, nargs="+",
                        help='Search term(s) of the form:\n'
                             'Node1[:name]/Node2[:name]/[Value:pattern]\n'
                             'Each Node, node name, Value and pattern are interpreted as separate regular '
                             'expressions. Node names may be omitted. Empty Node:name pair matches any node. '
                             'The ^ sign negates the term, meaning "everything except that".')
    parser.add_argument('path', metavar='path',
                        type=str, default='.',
                        help='Path to search for part configuration files.')
    args = parser.parse_args()
    # parse search term
    terms = SearchGroup()
    for t in args.term:
        term = SearchTerm(t)
        if term[0].node.match('PART') is None:
            term.insert(0, SearchTerm.Node('PART'))
        terms.append(term)
    # parse parts
    if os.path.isdir(args.path):
        for p in Part.LoadFromPath(args.path):
            if terms.match(p):
                print('%s\n' % p)
    sys.exit(0)
